# Qtile config

# Import libraries

from libqtile.command import lazy
from libqtile.config import Key, Click, Drag, Group, Match
from libqtile import layout, hook
import os
import subprocess

# autostart programs when starting window manager

@hook.subscribe.startup_once
def autostart():
    home = os.path.expanduser('~/.config/qtile/autostart.sh')
    subprocess.Popen([home])

# Variables 

mod = "mod4"
terminal = "alacritty"

# Keybindings

keys = [

  # Open terminal
  
  Key([mod], "t", lazy.spawn(terminal) ), 
  
  # Rofi power menu, application launcher, and window switcher
  
  Key([mod], "Escape", lazy.spawn("rofi -theme-str 'window {width: 10%;}' -show power-menu -modi 'power-menu:/home/joppe/Scripts/rofi-power-menu.sh --confirm='") ), 
  Key([mod], "space", lazy.spawn("rofi -show drun -show-icons -icon-theme Papirus-Dark") ), 
  Key([mod], "Tab", lazy.spawn("rofi -show window -show-icons -icon-theme Papirus-Dark") ), 
  
  # Dunst notification history and close all notifications
  
  Key([mod], "n", lazy.spawn("dunstctl history-pop") ), 
  Key([mod], "c", lazy.spawn("dunstctl close-all") ), 

  # play/pause/previous/next keyboard controls
  
  Key([], "XF86AudioPlay", lazy.spawn("playerctl play-pause") ), 
  Key([], "XF86AudioNext", lazy.spawn("playerctl next") ), 
  Key([], "XF86AudioPrev", lazy.spawn("playerctl previous") ), 

  # Start/stop picom keybindings for playing games
  
  Key([mod], "g", lazy.spawn("/home/joppe/Scripts/start-gamemode.sh") ), 
  Key([mod], "p", lazy.spawn("/home/joppe/Scripts/stop-gamemode.sh") ), 

  # Reload config and restart qtile

  Key([mod], "r", lazy.reload_config() ), 
  Key([mod, "control"], "r", lazy.restart() ), 

  # Kill a window
  
  Key([mod], "q", lazy.window.kill() ), 

  # Switch focused window

  Key([mod], "Right", lazy.layout.right() ), 
  Key([mod], "Left", lazy.layout.left() ),
  Key([mod], "Up", lazy.layout.up() ),
  Key([mod], "Down", lazy.layout.down() ),

  # Toggle floating window

  Key([mod, "shift"], "space", lazy.window.toggle_floating() ),

  # Toggle fullscreen

  Key([mod], "f", lazy.window.toggle_fullscreen() ),

  # Grow windows

  Key([mod, "mod1"], "Right", lazy.layout.grow_right() ),
  Key([mod, "mod1"], "Left", lazy.layout.grow_left() ),
  Key([mod, "mod1"], "Up", lazy.layout.grow_up() ),
  Key([mod, "mod1"], "Down", lazy.layout.grow_down() ),

  # Go to next/previous group

  Key([mod, "control"], "Right", lazy.screen.next_group() ),
  Key([mod, "control"], "Left", lazy.screen.prev_group() ),

]

mouse = [
  
  # Dragging and resizing floating windows with mod + mouse buttons

  Drag([mod], "Button1", lazy.window.set_position_floating(), start=lazy.window.get_position() ),
  Drag([mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size() ),

]

groups = [Group(i) for i in "12345678"]

for i in groups:
  keys.extend(
    [

      # mod + number of group = switch to group
      
      Key([mod], i.name, lazy.group[i.name].toscreen() ),


      # mod + shift + number of group = switch to & move focused window to group

      Key([mod, "shift"], i.name, lazy.window.togroup(i.name, switch_group=True) ),

      # use this if you don't want to switch to the group that the window was moved to

      # Key([mod, "shift"], i.name, lazy.window.togroup(i.name), .format(i.name) ),

  ]
)

layout-theme = {
                "border_focus":'#dfbf8e',
                "border_normal":'#665c54',
                "border_width":4,
        "margin = 10
        


# layouts = [ 

  

  
